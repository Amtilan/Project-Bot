import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from finhub import get_news, get_market_news
from gemini_analyze import analyze_pdf
import datetime
from graph_yf import graph, news as yf_news, get_recommendations_summary
from investgemini import invest_gemini, get_curent, check_for_value
from mongo_fetch import update_and_save_data
from ask_gemini import askbot, spehere
import logging
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ParseMode,
    ReplyKeyboardMarkup,
)
from dotenv import load_dotenv

load_dotenv()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            # KeyboardButton(text='–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏üí≥'),
            KeyboardButton(text='–õ—É—á—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üåê')
        ],
        [
            KeyboardButton(text="–°–µ–∫—Ç–æ—Ä–∞"),
            KeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏"),
        ],
        [
            KeyboardButton(text="–§—É–Ω–∫—Ü–∏–∏"),
        ]
    ],
    resize_keyboard=True,
)

keyboard_functions = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"),
            KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"),
        ],
        [
            KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
            KeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance"),
        ],
        [
            KeyboardButton(text="–ù–∞–∑–∞–¥"),
        ],
    ],
    resize_keyboard=True,
)
keyboard_storage = {}
PICK_STATE = {}
USER_STATE = {}
TELEGRAM_TOKEN = os.getenv("TELEGRAM_API_TOKEN1")
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    USER_STATE[message.from_user.id] = ""
    welcome_msg = """üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å Tiyin! üìà

‚ú® –ß—Ç–æ —Å–¥–µ–ª–∞–µ—Ç Tiyin –¥–ª—è —Ç–µ–±—è:

üìä –ê–Ω–∞–ª–∏–∑ –§–∏–Ω–∞–Ω—Å–æ–≤: –ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –±–∞–∫–Ω–æ–≤—Å–∫—É—é –≤—ã–ø–∏—Å–∫—É –∏ —Å–¥–µ–ª–∞–µ—Ç –≤—Å–µ —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —ç–∫–æ–Ω–æ–º–∏—Ç—å!

üîç –¢–æ—á–Ω—ã–µ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ü–æ–ª—É—á–∞–π —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª—É–±–æ–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–µ–Ω–¥–æ–≤.

üí° –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –°–æ–≤–µ—Ç—ã: –£–∑–Ω–∞–≤–∞–π –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–≤–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ª—É—á–∞–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞ –Ω–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã.

üöÄ –°—Ç–∞–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –≥—Ä–∞–º–æ—Ç–Ω—ã–º —Å Tiyin –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""
    await bot.send_message(message.chat.id, welcome_msg, reply_markup=keyboard)

@dp.message_handler(
    lambda message: message.text == "–°–µ–∫—Ç–æ—Ä–∞"
)
async def handle_test_gpt(message: types.Message):
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    response = spehere()
    await asyncio.sleep(2)

    await bot.edit_message_text(
        response, chat_id=loading_message.chat.id, message_id=loading_message.message_id
    )


async def daily_task():
    await update_and_save_data()

async def run_daily_task_at_specific_time(target_time):
    while True:
        now = datetime.datetime.now()
        future = datetime.datetime.combine(now.date(), target_time)
        if now.time() > target_time:
            future += datetime.timedelta(days=1)
        wait_seconds = (future - now).total_seconds()
        logging.info(f"Next run in {wait_seconds} seconds")
        await asyncio.sleep(wait_seconds)
        await daily_task()

async def on_startup(_):
    target_time = datetime.time(10, 0) 
    asyncio.create_task(run_daily_task_at_specific_time(target_time))


@dp.message_handler(commands=['ask'])
async def askgpt(message: types.Message):
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    response = askbot(message.text)
    await asyncio.sleep(2)

    await bot.edit_message_text(
    text=response,
    chat_id=loading_message.chat.id,
    message_id=loading_message.message_id,
)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('invest_'))
async def handle_investment(callback_query: CallbackQuery):
    company_name = callback_query.data[len('invest_'):]
    

    keyboard1 = InlineKeyboardMarkup()
    companies = get_curent(name=company_name)
    
            
    info = companies['data'][0]['data']

    response_text = f"""
<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é {company_name}</b>
<i>–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i>

<b>ISIN:</b> <code>{companies['isin']}</code>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ –±–∞–ª–∞–Ω—Å–∞:</b> {info['last_balance_year']}
<b>–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${info['market_capitalization']:,.2f}
<b>–ú–∞—Ä–∂–∞ EBIT:</b> {info['ebit_margin']['value']:.2f}% {check_for_value(info['ebit_margin']['point'])}
<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞:</b> {info['equity_ratio_in_percent']['value']:.2f}% {check_for_value(info['equity_ratio_in_percent']['point'])}
<b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞:</b> {info['return_equity']['value']:.2f}% {check_for_value(info['return_equity']['point'])}
<b>P/E Ratio (5 –ª–µ—Ç):</b> {info['price_earnings_ratio_5y']['value']:.2f} {check_for_value(info['price_earnings_ratio_5y']['point'])}
<b>P/E Ratio (—Ç–µ–∫—É—â–∏–π –≥–æ–¥):</b> {info['price_earnings_ratio_ay']['value']:.2f} {check_for_value(info['price_earnings_ratio_ay']['point'])}
<b>–†–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏:</b> {info['profit_growth']['value']} {check_for_value(info['profit_growth']['point'])}
<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ (6 –º–µ—Å.):</b> {info['share_price_m6_comparison']['value']} {check_for_value(info['share_price_m6_comparison']['point'])}
<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ (1 –≥–æ–¥):</b> {info['share_price_y1_comparison']['value']} {check_for_value(info['share_price_y1_comparison']['point'])}
<b>–ú–æ–º–µ–Ω—Ç—É–º —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏:</b> {info['share_price_momentum']['value']} {check_for_value(info['share_price_momentum']['point'])}
<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> {info['total_points']['point']} –∏–∑ {info['total_points']['value']} 
"""
    keyboard1 = keyboard_storage.get(callback_query.message.message_id, InlineKeyboardMarkup())
    await bot.edit_message_text(
        text=response_text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard1,
        parse_mode='HTML'
    )
    await callback_query.answer()

@dp.message_handler(
    lambda message: message.text == "–õ—É—á—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üåê"
)
async def handle_test_gpt(message: types.Message):
    image_path = "generated_image.png"
    with open(image_path, "rb") as image_file:
        await bot.send_photo(message.chat.id, photo=image_file)
    
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    
    response, companies = invest_gemini()
    await asyncio.sleep(2)
    keyboard1 = InlineKeyboardMarkup()
    if message.chat.id not in keyboard_storage:
        keyboard1 = InlineKeyboardMarkup()
        for company in companies:
            button = InlineKeyboardButton(text=company["name"], callback_data=f'invest_{company["name"]}')
            keyboard1.add(button)
        keyboard_storage[loading_message.message_id] = keyboard1
    else:
        keyboard1 = keyboard_storage[loading_message.message_id]

    await bot.edit_message_text(
        text=response,
        chat_id=loading_message.chat.id,
        message_id=loading_message.message_id,
        reply_markup=keyboard1
    )

@dp.message_handler(lambda message: message.text == "–§—É–Ω–∫—Ü–∏–∏")
async def handle_functions(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=keyboard_functions)


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_functions(message: types.Message):
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def handle_recommendations(message: types.Message):
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")


@dp.message_handler(lambda message: message.text == "–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance")
async def handler_company_news(message: types.Message):
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message_handler(lambda message: message.text == "–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏")
async def handler_graph(message: types.Message):
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
async def handle_market_news(message: types.Message):
    response = get_market_news()
    await message.reply(
        response, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
async def handler_company_news(message: types.Message):
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")
    
@dp.message_handler(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏üí≥")
async def handler_company_news(message: types.Message):
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≤—ã–ø–∏—Å–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF):")

@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
async def process_pdf_document(message: types.Message):
    if USER_STATE[message.from_user.id] == "–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏üí≥":
        if message.document.mime_type == 'application/pdf':
            file_object = await message.document.download(destination_file=f'{message.document.file_id}.pdf')
            file_path = str(file_object.name)
            file_object.close()
            loading_message = await message.reply_video(video="BAACAgIAAxkBAAMlZjJ6-k5XtwkPm9PY1OxWYDxs2CAAAtVHAAKsUYhJ7PMoM71siCY0BA", caption="–ï–Ω–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!")
            try:
                response = analyze_pdf(file_path)
            finally:
                await asyncio.sleep(2) 
                os.remove(file_path)

            USER_STATE[message.from_user.id] = ''
            await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
            
            await message.reply(response)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
    
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def process_ticker(message: types.Message):
    try:
        if USER_STATE[message.from_user.id] == "–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏":
            ticker = message.text.upper()
            image_path = graph(ticker)
            with open(image_path, "rb") as photo:
                await message.reply_photo(photo, caption=f"{ticker} Stock Price Over Time")
            os.remove(image_path)
            USER_STATE[message.from_user.id] = ""
        
        elif USER_STATE[message.from_user.id] == "–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance":
            ticker = message.text.upper()
            response = yf_news(ticker)
            
            await message.answer(
                response, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard
            )
            USER_STATE[message.from_user.id] = ""
            
        elif USER_STATE[message.from_user.id] == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
            ticker = message.text.upper()
            response = get_recommendations_summary(ticker)
            
            await message.answer(
                response, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard
            )
            USER_STATE[message.from_user.id] = ""
        
        elif USER_STATE[message.from_user.id] == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏":
            ticker = message.text.upper()
            response = get_news(ticker)

            await message.answer(
                response, reply_markup=keyboard
            )
            USER_STATE[message.from_user.id] = ""
        else:
            pass
    except:
        pass

                
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)