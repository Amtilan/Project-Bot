import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from finhub import get_news, get_market_news
from gemini_analyze import analyze_pdf
import datetime
from graph_yf import graph, news as yf_news, get_recommendations_summary
from investgemini import invest_gemini, get_curent, check_for_value
from mongo_fetch import update_and_save_data, is_allowed_user
from ask_gemini import askbot, spehere
import logging
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from dotenv import load_dotenv

load_dotenv()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            # KeyboardButton(text='–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏üí≥'),
            KeyboardButton(text='–õ—É—á—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üåê')
        ],
        [
            KeyboardButton(text="–°–µ–∫—Ç–æ—Ä–∞"),
            KeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏"),
        ],
        [
            KeyboardButton(text="–§—É–Ω–∫—Ü–∏–∏"),
        ]
    ],
    resize_keyboard=True,
)

keyboard_functions = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"),
            KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"),
        ],
        [
            KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
            KeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance"),
        ],
        [
            KeyboardButton(text="–ù–∞–∑–∞–¥"),
        ],
    ],
    resize_keyboard=True,
)
keyboard_storage = {}
PICK_STATE = {}
USER_STATE = {}
TELEGRAM_TOKEN = os.getenv("TELEGRAM_API_TOKEN1")
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    USER_STATE[message.from_user.id] = ""
    welcome_msg = """üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å Narasense AI! üìà

–¢—ã —Ö–æ—á–µ—à—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Å—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º? –ù–µ –∑–Ω–∞–µ—à—å, —Å –∫–∞–∫–æ–π –∞–∫—Ü–∏–∏ –Ω–∞—á–∞—Ç—å? –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —ç—Ç–æ–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏!

‚ú® –ß—Ç–æ –¥–µ–ª–∞–µ—Ç Narasense AI –¥–ª—è —Ç–µ–±—è:

üìä –ê–Ω–∞–ª–∏–∑ –†—ã–Ω–∫–∞: –ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫, –≤—ã—è–≤–ª—è—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

üîç –¢–æ—á–Ω—ã–µ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ü–æ–ª—É—á–∞–π —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª—É–±–æ–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–µ–Ω–¥–æ–≤.

üí° –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –°–æ–≤–µ—Ç—ã: –£–∑–Ω–∞–≤–∞–π –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ–ª—É—á–∞–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ–≤–µ—Ç—ã –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.

üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞ –Ω–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã.

üöÄ –°—Ç–∞–Ω—å —É—Å–ø–µ—à–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º —Å Narasense AI –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ –¥–∞–≤–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ! üí∞

üìà –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—Å–ø–µ—Ö —Å Narasense AI! üöÄ"""
    await bot.send_message(message.chat.id, welcome_msg , reply_markup=keyboard)

@dp.message_handler(
    lambda message: message.text == "–°–µ–∫—Ç–æ—Ä–∞"
)
async def handle_test_gpt(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    response = spehere()
    await asyncio.sleep(2)

    await bot.edit_message_text(
        response, chat_id=loading_message.chat.id, message_id=loading_message.message_id
    )


async def daily_task():
    await update_and_save_data()

async def run_daily_task_at_specific_time(target_time):
    while True:
        now = datetime.datetime.now()
        future = datetime.datetime.combine(now.date(), target_time)
        if now.time() > target_time:
            future += datetime.timedelta(days=1)
        wait_seconds = (future - now).total_seconds()
        logging.info(f"Next run in {wait_seconds} seconds")
        await asyncio.sleep(wait_seconds)
        await daily_task()

async def on_startup(_):
    target_time = datetime.time(10, 0) 
    asyncio.create_task(run_daily_task_at_specific_time(target_time))


@dp.message_handler(commands=['ask'])
async def askgpt(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    response = askbot(message.text)
    await asyncio.sleep(2)

    await bot.edit_message_text(
    text=response,
    chat_id=loading_message.chat.id,
    message_id=loading_message.message_id,
)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('invest_'))
async def handle_investment(callback_query: CallbackQuery):
    company_name = callback_query.data[len('invest_'):]
    if company_name != 'explanation':

        keyboard1 = InlineKeyboardMarkup()
        companies = get_curent(name=company_name)
        
                
        info = companies['data'][0]['data']
        
        response_text = f"""
<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é {company_name}</b>
<i>–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i>

<b>ISIN:</b> <code>{companies['isin']}</code>
"""

        # –£—Å–ª–æ–≤–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        if info.get('last_balance_year'):
            response_text += f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ –±–∞–ª–∞–Ω—Å–∞:</b> {info['last_balance_year']}\n"

        if info.get('market_capitalization'):
            response_text += f"<b>–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${info['market_capitalization']:,.2f}\n"

        ebit_margin = info.get('ebit_margin')
        if ebit_margin and ebit_margin.get('value') is not None:
            response_text += f"<b>–ú–∞—Ä–∂–∞ EBIT:</b> {ebit_margin['value']:.2f}% {check_for_value(ebit_margin['point'])}\n"

        equity_ratio = info.get('equity_ratio_in_percent')
        if equity_ratio and equity_ratio.get('value') is not None:
            response_text += f"<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞:</b> {equity_ratio['value']:.2f}% {check_for_value(equity_ratio['point'])}\n"

        return_equity = info.get('return_equity')
        if return_equity and return_equity.get('value') is not None:
            response_text += f"<b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞:</b> {return_equity['value']:.2f}% {check_for_value(return_equity['point'])}\n"

        pe_ratio_5y = info.get('price_earnings_ratio_5y')
        if pe_ratio_5y and pe_ratio_5y.get('value') is not None:
            response_text += f"<b>P/E Ratio (5 –ª–µ—Ç):</b> {pe_ratio_5y['value']:.2f} {check_for_value(pe_ratio_5y['point'])}\n"

        pe_ratio_ay = info.get('price_earnings_ratio_ay')
        if pe_ratio_ay and pe_ratio_ay.get('value') is not None:
            response_text += f"<b>P/E Ratio (—Ç–µ–∫—É—â–∏–π –≥–æ–¥):</b> {pe_ratio_ay['value']:.2f} {check_for_value(pe_ratio_ay['point'])}\n"

        profit_growth = info.get('profit_growth')
        if profit_growth and profit_growth.get('value') is not None:
            response_text += f"<b>–†–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏:</b> {profit_growth['value']} {check_for_value(profit_growth['point'])}\n"

        share_price_m6 = info.get('share_price_m6_comparison')
        if share_price_m6 and share_price_m6.get('value') is not None:
            response_text += f"<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ (6 –º–µ—Å.):</b> {share_price_m6['value']} {check_for_value(share_price_m6['point'])}\n"

        share_price_y1 = info.get('share_price_y1_comparison')
        if share_price_y1 and share_price_y1.get('value') is not None:
            response_text += f"<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ (1 –≥–æ–¥):</b> {share_price_y1['value']} {check_for_value(share_price_y1['point'])}\n"

        share_price_momentum = info.get('share_price_momentum')
        if share_price_momentum and share_price_momentum.get('value') is not None:
            response_text += f"<b>–ú–æ–º–µ–Ω—Ç—É–º —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏:</b> {share_price_momentum['value']} {check_for_value(share_price_momentum['point'])}\n"

        total_points = info.get('total_points')
        if total_points and total_points.get('point') is not None and total_points.get('value') is not None:
            response_text += f"<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> {total_points['point']} –∏–∑ {total_points['value']}\n"

    else:
        
        response_text = """
<b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏:</b>

<b>ISIN:</b> –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ –±–∞–ª–∞–Ω—Å–∞:</b> –ì–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–æ–º–ø–∞–Ω–∏–∏.

<b>–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.

<b>–ú–∞—Ä–∂–∞ EBIT:</b> –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–æ –≤—ã—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–ª–æ–≥–æ–≤ –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏.

<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞:</b> –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö –µ–µ –∞–∫—Ç–∏–≤–æ–≤.

<b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞:</b> –ü—Ä–∏–±—ã–ª—å, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–æ–ª–ª–∞—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞.

<b>P/E Ratio (5 –ª–µ—Ç):</b> –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—è—Ç—å –ª–µ—Ç.

<b>P/E Ratio (—Ç–µ–∫—É—â–∏–π –≥–æ–¥):</b> –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥.

<b>–†–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏:</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.

<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ (6 –º–µ—Å.):</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à–µ—Å—Ç—å –º–µ—Å—è—Ü–µ–≤.

<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ (1 –≥–æ–¥):</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥.

<b>–ú–æ–º–µ–Ω—Ç—É–º —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏:</b> –¢–µ–Ω–¥–µ–Ω—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.

<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    keyboard1 = keyboard_storage.get(callback_query.message.message_id, InlineKeyboardMarkup())
    
    await bot.edit_message_text(
        text=response_text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard1,
        parse_mode='HTML'
    )
    await callback_query.answer()

@dp.message_handler(
    lambda message: message.text == "–õ—É—á—à–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üåê"
)
async def handle_test_gpt(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    image_path = "generated_image.png"
    with open(image_path, "rb") as image_file:
        await bot.send_photo(message.chat.id, photo=image_file)
    
    loading_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞...")
    
    response, companies = invest_gemini()
    await asyncio.sleep(2)
    keyboard1 = InlineKeyboardMarkup()
    if message.chat.id not in keyboard_storage:
        keyboard1 = InlineKeyboardMarkup()
        for company in companies:
            button = InlineKeyboardButton(text=company["name"], callback_data=f'invest_{company["name"]}')
            keyboard1.add(button)
        button = InlineKeyboardButton(text="–û–±—å—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫", callback_data=f'invest_explanation')
        keyboard1.add(button)
    
        keyboard_storage[loading_message.message_id] = keyboard1
    else:
        keyboard1 = keyboard_storage[loading_message.message_id]

    await bot.edit_message_text(
        text=response,
        chat_id=loading_message.chat.id,
        message_id=loading_message.message_id,
        reply_markup=keyboard1
    )

@dp.message_handler(lambda message: message.text == "–§—É–Ω–∫—Ü–∏–∏")
async def handle_functions(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=keyboard_functions)


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_functions(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def handle_recommendations(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")


@dp.message_handler(lambda message: message.text == "–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance")
async def handler_company_news(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message_handler(lambda message: message.text == "–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏")
async def handler_graph(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
async def handle_market_news(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    response = get_market_news()
    await message.reply(
        response, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
async def handler_company_news(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏:")
    
@dp.message_handler(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏üí≥")
async def handler_company_news(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    USER_STATE[message.from_user.id] = message.text
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≤—ã–ø–∏—Å–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF):")

@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
async def process_pdf_document(message: types.Message):
    if not is_allowed_user(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if USER_STATE[message.from_user.id] == "–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏üí≥":
        if message.document.mime_type == 'application/pdf':
            file_object = await message.document.download(destination_file=f'{message.document.file_id}.pdf')
            file_path = str(file_object.name)
            file_object.close()
            loading_message = await message.reply_video(video="BAACAgIAAxkBAAMlZjJ6-k5XtwkPm9PY1OxWYDxs2CAAAtVHAAKsUYhJ7PMoM71siCY0BA", caption="–ï–Ω–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!")
            try:
                response = analyze_pdf(file_path)
            finally:
                await asyncio.sleep(2) 
                os.remove(file_path)

            USER_STATE[message.from_user.id] = ''
            await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
            
            await message.reply(response)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
    
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def process_ticker(message: types.Message):
    try:
        if USER_STATE[message.from_user.id] == "–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏":
            ticker = message.text.upper()
            image_path = graph(ticker)
            with open(image_path, "rb") as photo:
                await message.reply_photo(photo, caption=f"{ticker} Stock Price Over Time")
            os.remove(image_path)
            USER_STATE[message.from_user.id] = ""
        
        elif USER_STATE[message.from_user.id] == "–ù–æ–≤–æ—Å—Ç–∏ Yahoo Finance":
            ticker = message.text.upper()
            response = yf_news(ticker)
            
            await message.answer(
                response, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard
            )
            USER_STATE[message.from_user.id] = ""
            
        elif USER_STATE[message.from_user.id] == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
            ticker = message.text.upper()
            response = get_recommendations_summary(ticker)
            
            await message.answer(
                response, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard
            )
            USER_STATE[message.from_user.id] = ""
        
        elif USER_STATE[message.from_user.id] == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏":
            ticker = message.text.upper()
            response = get_news(ticker)

            await message.answer(
                response, reply_markup=keyboard
            )
            USER_STATE[message.from_user.id] = ""
        else:
            pass
    except:
        pass

                
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)