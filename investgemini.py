from dotenv import load_dotenv
import os
import google.generativeai as genai
import random
import json

def check_for_value(value : int) -> str:
    if value == 0: return '‚ûñ'
    elif value == 1: return 'üìà'
    return 'üìâ'

def get_all_values():
    with open('results.json', 'r') as file:
        data = json.load(file)
    return data

def get_curent(name) -> dict:
    with open('results.json', 'r') as file:
        data = json.load(file)
    result = []
    for companie in data:
        if companie['name'] == name:
            result = companie
    return result

def get_json_text(json_path) -> (tuple[str, dict]):
    if not os.path.exists(json_path):
        raise FileNotFoundError(f"No file found at the provided path: {json_path}")

    with open(json_path, 'r') as file:
        data = json.load(file)
    
    if not isinstance(data, list):
        raise ValueError("Expected a list of items in the JSON file")

    random_items = random.sample(data, min(len(data), 3))

    formatted_random_items = json.dumps(random_items, indent=4)
    
    return formatted_random_items, random_items

def invest_gemini() -> (tuple[str, dict]):
    load_dotenv()

    genai.configure(api_key=os.getenv('GGEMINI_API_KEY'))
    model = genai.GenerativeModel('gemini-1.5-pro-latest')

    json_file_path = 'results.json'
    
    user_question = """
    –ö–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—Å—Ç –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç, –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é 
    —Ç–æ—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∞–∫—Ü–∏–π. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ü–∏—è–º 
    –≤ –∑–∞–º–∞–Ω—á–∏–≤–æ–π –º–∞–Ω–µ—Ä–µ, –≤—ã–∑–≤–∞–≤ —É —á–∏—Ç–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é —ç—Ç–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. 
    –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. 

    –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –∏ –∏—Ö —Ç–∏–∫–µ—Ä–Ω—ã–µ –º–µ—Ç–∫–∏, 
    –æ—Ñ–æ—Ä–º–ª—è—è –∫–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –ø—Ä–∏—è—Ç–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∏–ª–µ, 
    –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤. 

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å 3 —Ç–∞–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    """
    data, nedeed_data = get_json_text(json_file_path)

    user_question += f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏ –∞–∫—Ü–∏–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: {data}"
    response = model.generate_content(user_question)

    if response.text:
        return response.text, nedeed_data
    else:
        return ""